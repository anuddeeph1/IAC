name: cloud hosted web application using terraform
run-name: ${{ github.actor }} has triggered Scan Action üöÄ
on:
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"
permissions:
  contents: read

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}

jobs:
  Deploy-EKS-using-TF:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Terraform
        run: |
          echo "üçè Installing Terraform..."
          wget https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip
          unzip terraform_1.10.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          echo "Terraform installed successfully."

      - name: Check terraform version
        run: terraform version

      - name: Run Terraform commands
        run: |
          cd config-files/terraform/eks
          echo "Running Terraform commands..."
          terraform init

          terraform plan -out tfplan.binary
          terraform show -json tfplan.binary | jq > payload.json
          #terraform apply --auto-approve
          echo "Terraform commands executed successfully."
    
  Build-and-Deploy-HTTPD:
    runs-on: ubuntu-latest
    needs: Deploy-EKS-using-TF
    steps:
      - name: Set up AWS ECR authentication
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Build HTTPD Docker image
        run: |
          echo "üçè Building HTTPD Docker image..."
          cd config-files/dockerfile
          docker build -t my-httpd-app:v1.0 .
          echo "HTTPD Docker image built successfully."

      - name: Tag and Push Docker image to ECR
        run: |
          echo "üçè Tagging and pushing HTTPD image to ECR..."
          docker tag my-httpd-app:v1.0 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/httpd-app:v1.0 
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/httpd-app:v1.0 
          echo "Image pushed to ECR."

      - name: nctl-scan-installer
        uses: nirmata/action-install-nctl-scan@v0.0.4

      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      - name: Check nctl version
        run: nctl version

      - name: NCTL Scan - Kubernetes
        run: |
          cd config-files/k8s
          envsubst < httpd.yaml > httpd-with-image.yaml
          cd ../..
          nctl scan kubernetes --policies controls/pod-security --resources config-files/k8s/httpd-with-image.yaml --details 
        
      - name: Set up kubeconfig for EKS
        run: |
          echo "Setting up kubectl for EKS..."
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name defectdojo
         #aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} 
      
     # - name: Install kubectl
     #   run: |
     #     echo "üçè Installing kubectl..."
     #     curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl"
     #     chmod +x ./kubectl
     #     sudo mv ./kubectl /usr/local/bin/
     #     echo "kubectl installed successfully."

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3

      - name: Replace IMAGE_NAME and apply deployment
        run: |
          echo "Deploying to Kubernetes with image: $IMAGE_NAME"
          # Check if the namespace exists, and create it only if it doesn't exist
          kubectl get ns httpd || kubectl create ns httpd
          kubectl get secret image-pull-secret --namespace=httpd || kubectl create secret docker-registry image-pull-secret \
          --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
          --docker-email=${{ secrets.EMAIL }} \
          --namespace=httpd
          #kubectl create secret docker-registry image-pull-secret --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) --docker-email=${{ secrets.EMAIL }}
          cd config-files/k8s
          envsubst < httpd.yaml | kubectl -n httpd apply -f -
          
      - run: echo "üçè This job's status is ${{ job.status }}."
